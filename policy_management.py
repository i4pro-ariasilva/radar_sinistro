#!/usr/bin/env python3
"""
Extens√£o para o app.py - Gerenciamento de Ap√≥lices Residenciais
Funcionalidades para inclus√£o individual e em lote de ap√≥lices de seguros residenciais
com an√°lise de risco baseada em dados clim√°ticos e caracter√≠sticas da propriedade.
"""

import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import sqlite3
import sys
import os
import json

# Adicionar ao sys.path se necess√°rio
sys.path.append('.')

try:
    from database import get_database, CRUDOperations
    from src.ml.model_predictor import ModelPredictor
    from src.ml.feature_engineering import FeatureEngineer
    from src.ml.coverage_predictors import CoverageRiskManager
    # Feature flag desabilitado - sem bloqueio por regi√£o
    REGION_BLOCK_FEATURE_ENABLED = False
except ImportError as e:
    st.error(f"Erro ao importar m√≥dulos: {e}")

def get_risk_level_emoji(score):
    """Retorna emoji baseado no score de risco"""
    if score >= 70:
        return "üî¥"
    elif score >= 40:
        return "üü°"
    else:
        return "üü¢"

def calculate_coverage_specific_risk(policy_data, selected_coverages):
    """Calcula risco espec√≠fico por cobertura usando os novos modelos"""
    try:
        # Inicializar o gerenciador de coberturas (singleton)
        from src.ml.coverage_predictors import CoverageRiskManager
        
        # Cache da inst√¢ncia no n√≠vel do m√≥dulo para evitar m√∫ltiplas inicializa√ß√µes
        if not hasattr(calculate_coverage_specific_risk, '_coverage_manager'):
            calculate_coverage_specific_risk._coverage_manager = CoverageRiskManager()
        
        coverage_manager = calculate_coverage_specific_risk._coverage_manager
        
        # Mapear nomes de coberturas do sistema para os modelos
        coverage_mapping = {
            'Danos El√©tricos': 'danos_eletricos',
            'Vendaval': 'vendaval', 
            'Granizo': 'granizo',
            'Alagamento': 'alagamento',
            'Inc√™ndio': None,  # N√£o tem modelo clim√°tico espec√≠fico
            'Roubo': None,  # N√£o tem modelo clim√°tico espec√≠fico
            'Responsabilidade Civil': None  # N√£o tem modelo clim√°tico espec√≠fico
        }
        
        # Converter APENAS as coberturas selecionadas
        model_coverages = []
        unavailable_coverages = []
        
        for cob_name in selected_coverages:
            # Remover asterisco (*) que indica cobertura b√°sica
            clean_name = cob_name.replace('*', '').strip()
            
            if clean_name in coverage_mapping:
                if coverage_mapping[clean_name]:
                    model_coverages.append(coverage_mapping[clean_name])
                else:
                    unavailable_coverages.append(cob_name)
            else:
                unavailable_coverages.append(cob_name)
        
        # Validar se h√° pelo menos uma cobertura com modelo dispon√≠vel
        if not model_coverages:
            return {
                'coverage_analysis': None,
                'has_specific_analysis': False,
                'analyzed_coverages': 0,
                'recommendations': [],
                'error': f"Nenhuma das coberturas selecionadas ({', '.join(selected_coverages)}) possui modelo de an√°lise clim√°tica espec√≠fico dispon√≠vel."
            }
        
        # Fazer an√°lise espec√≠fica apenas das coberturas selecionadas
        result = coverage_manager.analyze_all_coverages(policy_data, model_coverages)
        
        # Informa√ß√µes sobre coberturas n√£o analisadas
        analysis_info = {
            'total_selected': len(selected_coverages),
            'analyzed': len(model_coverages),
            'unavailable': unavailable_coverages
        }
        
        return {
            'coverage_analysis': result,
            'has_specific_analysis': True,
            'analyzed_coverages': len(model_coverages),
            'recommendations': result.get('recommendations', []),
            'analysis_info': analysis_info
        }
        
    except Exception as e:
        st.warning(f"An√°lise espec√≠fica por cobertura indispon√≠vel: {e}")
        return {
            'coverage_analysis': None,
            'has_specific_analysis': False,
            'analyzed_coverages': 0,
            'recommendations': [],
            'error': str(e)
        }

def calculate_policy_risk(policy_data):
    """Calcula o risco para uma ap√≥lice residencial usando o modelo ML"""
    try:
        # Tentar importar localmente para evitar problemas de import
        import sys
        sys.path.append('.')
        
        from src.ml.model_predictor import ModelPredictor
        
        # Inicializar o preditor
        predictor = ModelPredictor()
        
        # Preparar dados para predi√ß√£o (residencial)
        prediction_data = {
            'numero_apolice': policy_data['numero_apolice'],
            'segurado': policy_data['segurado'],
            'cep': policy_data['cep'],
            'valor_segurado': policy_data['valor_segurado'],
            'tipo_residencia': policy_data['tipo_residencia'],
            'data_inicio': policy_data['data_inicio']
        }
        
        # Fazer predi√ß√£o
        result = predictor.predict_single_policy(prediction_data)
        
        return {
            'score_risco': result.get('risk_score', 0),
            'nivel_risco': result.get('risk_level', 'baixo'),
            'probabilidade': result.get('probability', 0),
            'fatores_principais': result.get('influence_factors', [])
        }
        
    except ImportError as e:
        st.error(f"Erro ao importar ModelPredictor: {e}")
        # Fallback: calcular risco b√°sico
        return calculate_basic_risk(policy_data)
    except Exception as e:
        st.error(f"Erro ao calcular risco: {e}")
        # Fallback: calcular risco b√°sico
        return calculate_basic_risk(policy_data)

def calculate_basic_risk(policy_data):
    """C√°lculo b√°sico de risco residencial como fallback"""
    # C√°lculo simples baseado em regras para resid√™ncias
    score = 20  # Base menor para resid√™ncias
    
    # Valor segurado (maior valor = maior risco)
    if policy_data['valor_segurado'] > 500000:
        score += 25
    elif policy_data['valor_segurado'] > 300000:
        score += 15
    elif policy_data['valor_segurado'] > 100000:
        score += 10
    
    # Tipo de resid√™ncia (risco baseado no tipo)
    tipo_risco = {
        'Casa': 15,
        'Apartamento': 5,
        'Sobrado': 20,
        'Kitnet': 8
    }
    score += tipo_risco.get(policy_data.get('tipo_residencia', 'Casa'), 10)
    
    # CEP (an√°lise b√°sica por regi√£o)
    cep_first_digit = policy_data['cep'][0] if policy_data['cep'] else '0'
    if cep_first_digit in ['0', '1']:  # SP/RJ - maior risco urbano
        score += 15
    elif cep_first_digit in ['2', '3']:  # ES/MG - risco m√©dio
        score += 10
    else:  # Outras regi√µes - risco menor
        score += 5
    
    score = min(score, 100)  # M√°ximo 100
    
    # Determinar n√≠vel (padronizado com app.py)
    if score >= 75:
        nivel = 'alto'
    elif score >= 50:
        nivel = 'medio'
    elif score >= 25:
        nivel = 'baixo'
    else:
        nivel = 'muito_baixo'
    
    return {
        'score_risco': float(score),
        'nivel_risco': nivel,
        'probabilidade': score / 100.0,
        'fatores_principais': [
            {'feature': 'valor_segurado', 'importance': 0.3},
            {'feature': 'tipo_residencia', 'importance': 0.25},
            {'feature': 'localizacao_cep', 'importance': 0.25},
            {'feature': 'risco_regional', 'importance': 0.2}
        ]
    }

def save_policy_to_database(policy_data, risk_data):
    """Salva ap√≥lice no banco de dados com dados de risco"""
    try:
        # Tentar usar o sistema de banco completo primeiro
        from database import get_database, CRUDOperations
        from database.models import Apolice
        from datetime import datetime
        
        db = get_database()
        crud = CRUDOperations(db)
        
        # Verificar se a ap√≥lice j√° existe
        existing_apolice = crud.get_apolice_by_numero(policy_data['numero_apolice'])
        if existing_apolice:
            st.warning(f"‚ö†Ô∏è Ap√≥lice {policy_data['numero_apolice']} j√° existe no banco de dados")
            return existing_apolice.id  # Retorna o ID existente
        
        # Criar objeto Apolice com estrutura correta
        apolice = Apolice(
            numero_apolice=policy_data['numero_apolice'],
            segurado=policy_data.get('segurado', 'N/A'),
            cd_produto=policy_data.get('cd_produto'),  # NOVO: c√≥digo do produto
            cep=policy_data['cep'],
            tipo_residencia=policy_data['tipo_residencia'].lower(),  # Converter para min√∫scula
            valor_segurado=policy_data['valor_segurado'],
            data_contratacao=datetime.fromisoformat(policy_data['data_inicio']),
            latitude=None,  # Ser√° preenchido posteriormente via geocoding
            longitude=None,  # Ser√° preenchido posteriormente via geocoding
            ativa=True,
            email=policy_data.get('email'),  # NOVO: campo de email
            telefone=policy_data.get('telefone')  # NOVO: campo de telefone
        )
        
        # Adicionar campos extras para dados de risco
        apolice.data_inicio = policy_data['data_inicio']
        apolice.score_risco = float(risk_data['score_risco'])
        apolice.nivel_risco = risk_data['nivel_risco']
        apolice.probabilidade_sinistro = float(risk_data['probabilidade'])
        
        # Inserir no banco usando a fun√ß√£o correta
        try:
            policy_id = crud.insert_apolice(apolice)
        except Exception as insert_error:
            # Se for erro de constraint de unicidade, verificar se j√° existe
            if "UNIQUE constraint failed" in str(insert_error):
                existing_apolice = crud.get_apolice_by_numero(policy_data['numero_apolice'])
                if existing_apolice:
                    st.warning(f"‚ö†Ô∏è Ap√≥lice {policy_data['numero_apolice']} j√° existe no banco (ID: {existing_apolice.id})")
                    return existing_apolice.id
            # Re-raise outros erros
            raise insert_error
        
        # Inserir coberturas selecionadas (se houver)
        if policy_id and 'cd_coberturas' in policy_data and policy_data['cd_coberturas']:
            try:
                success = crud.insert_multiple_apolice_coberturas(
                    nr_apolice=policy_data['numero_apolice'],
                    cd_produto=policy_data['cd_produto'],
                    cd_coberturas=policy_data['cd_coberturas'],
                    dt_inclusao=policy_data['data_inicio']
                )
                if not success:
                    st.warning("‚ö†Ô∏è Ap√≥lice salva, mas houve erro ao salvar as coberturas.")
                    
                # NOVO: Salvar an√°lises de risco por cobertura individual
                save_coverage_risk_analysis(policy_data, risk_data)
                    
            except Exception as e:
                st.warning(f"‚ö†Ô∏è Ap√≥lice salva, mas erro ao salvar coberturas: {e}")
        
        return policy_id
        
    except Exception as e:
        st.warning(f"Sistema de banco avan√ßado indispon√≠vel: {e}")
        # Fallback: salvar em SQLite simples
        return save_policy_simple(policy_data, risk_data)

def save_coverage_risk_analysis(policy_data, risk_data):
    """Salva an√°lises de risco individuais por cobertura na tabela cobertura_risco"""
    try:
        from database.cobertura_risco_dao import CoberturaRiscoDAO, CoberturaRiscoData
        import random
        from datetime import datetime
        
        # Se n√£o h√° dados de an√°lise por cobertura no risk_data, calcular agora
        coverage_analysis = risk_data.get('coverage_analysis')
        if not coverage_analysis and 'cd_coberturas' in policy_data:
            # Calcular an√°lise espec√≠fica por cobertura
            selected_coverage_names = []
            for cd_cobertura in policy_data['cd_coberturas']:
                # Mapear c√≥digo para nome (completo)
                coverage_map = {
                    1: 'Inc√™ndio', 2: 'Vendaval', 3: 'Roubo', 4: 'Responsabilidade Civil',
                    5: 'Vendaval', 6: 'Danos El√©tricos', 7: 'Danos El√©tricos', 8: 'Danos El√©tricos', 
                    9: 'Granizo', 10: 'Alagamento', 11: 'Granizo', 12: 'Alagamento', 
                    13: 'Granizo', 14: 'Alagamento', 15: 'Vendaval', 16: 'Danos El√©tricos'
                }
                coverage_name = coverage_map.get(cd_cobertura, 'Cobertura Padr√£o')
                selected_coverage_names.append(coverage_name)
            
            # Tentar calcular an√°lise espec√≠fica
            try:
                coverage_risk_data = calculate_coverage_specific_risk(policy_data, selected_coverage_names)
                if coverage_risk_data and coverage_risk_data.get('has_specific_analysis'):
                    coverage_analysis = coverage_risk_data['coverage_analysis']
            except Exception as e:
                st.warning(f"An√°lise por cobertura n√£o dispon√≠vel: {e}")
        
        # Se temos an√°lise por cobertura, salvar os dados individuais
        if coverage_analysis and 'coverage_details' in coverage_analysis:
            dao = CoberturaRiscoDAO()
            coverage_risks = []
            
            for cd_cobertura in policy_data['cd_coberturas']:
                # Buscar dados espec√≠ficos desta cobertura na an√°lise
                coverage_detail = None
                
                # Mapeamento melhorado: c√≥digo -> tipo de modelo
                codigo_para_modelo = {
                    2: 'vendaval', 5: 'vendaval', 15: 'vendaval',  # Vendaval
                    6: 'danos_eletricos', 7: 'danos_eletricos', 8: 'danos_eletricos', 16: 'danos_eletricos',  # Danos El√©tricos
                    9: 'granizo', 11: 'granizo', 13: 'granizo',  # Granizo
                    10: 'alagamento', 12: 'alagamento', 14: 'alagamento'  # Alagamento
                }
                
                # Se a cobertura tem modelo espec√≠fico, buscar na an√°lise
                if cd_cobertura in codigo_para_modelo:
                    modelo_esperado = codigo_para_modelo[cd_cobertura]
                    
                    for detail in coverage_analysis['coverage_details']:
                        if modelo_esperado in detail['coverage_type'].lower():
                            coverage_detail = detail
                            break
                
                # Se n√£o encontramos dados espec√≠ficos, usar dados da ap√≥lice com varia√ß√£o
                if not coverage_detail:
                    base_score = float(risk_data['score_risco'])
                    
                    # Adicionar varia√ß√£o baseada no tipo de cobertura (expandido)
                    if cd_cobertura in [2, 5, 15]:  # Vendaval
                        score_variation = random.uniform(-10, 20)
                    elif cd_cobertura in [6, 7, 8, 16]:  # Danos El√©tricos
                        score_variation = random.uniform(-5, 10)
                    elif cd_cobertura in [9, 11, 13]:  # Granizo
                        score_variation = random.uniform(-8, 15)
                    elif cd_cobertura in [10, 12, 14]:  # Alagamento
                        score_variation = random.uniform(-5, 25)
                    else:
                        score_variation = random.uniform(-5, 5)
                    
                    coverage_score = float(max(0, min(100, base_score + score_variation)))
                    
                    coverage_detail = {
                        'risk_score': coverage_score,
                        'risk_level': get_risk_level_from_score(coverage_score),
                        'confidence': float(random.uniform(0.8, 0.95)),
                        'coverage_type': f'coverage_{cd_cobertura}'
                    }
                
                # Criar objeto de dados de risco para esta cobertura
                risco_data = CoberturaRiscoData(
                    nr_apolice=str(policy_data['numero_apolice']),
                    cd_cobertura=int(cd_cobertura),
                    cd_produto=int(policy_data.get('cd_produto', 1)),
                    score_risco=float(coverage_detail['risk_score']),
                    nivel_risco=str(coverage_detail['risk_level']),
                    probabilidade=float(coverage_detail['risk_score']) / 100.0,
                    modelo_usado=f'{coverage_detail["coverage_type"]}_model_v2',
                    versao_modelo='2.0',
                    fatores_risco={"fonte": "inclusao_apolice", "tipo_cobertura": str(coverage_detail['coverage_type'])},
                    dados_climaticos={"temperatura": int(25), "umidade": int(random.randint(40, 80))},
                    dados_propriedade={"valor": float(policy_data['valor_segurado']), "tipo": str(policy_data['tipo_residencia'])},
                    resultado_predicao={"score": float(coverage_detail['risk_score']), "confianca": float(coverage_detail['confidence'])},
                    confianca_modelo=float(coverage_detail['confidence']),
                    explicabilidade={"principais_fatores": ["localizacao", "historico", "tipo_cobertura"]},
                    tempo_processamento_ms=int(random.randint(50, 150))
                )
                
                coverage_risks.append(risco_data)
            
            # Salvar todas as an√°lises de risco por cobertura
            if coverage_risks:
                result_ids = dao.salvar_multiplos_riscos(coverage_risks)
                if result_ids:
                    st.success(f"‚úÖ Salvas {len(result_ids)} an√°lises de risco por cobertura individual!")
                else:
                    st.warning("‚ö†Ô∏è Erro ao salvar an√°lises de risco por cobertura")
        
        else:
            # Fallback: criar an√°lises b√°sicas para cada cobertura
            if 'cd_coberturas' in policy_data and policy_data['cd_coberturas']:
                dao = CoberturaRiscoDAO()
                coverage_risks = []
                
                for cd_cobertura in policy_data['cd_coberturas']:
                    # Criar an√°lise b√°sica com score variado baseado na ap√≥lice
                    base_score = float(risk_data['score_risco'])
                    coverage_score = float(max(0, min(100, base_score + random.uniform(-15, 15))))
                    nivel_risco = get_risk_level_from_score(coverage_score)
                    
                    risco_data = CoberturaRiscoData(
                        nr_apolice=str(policy_data['numero_apolice']),
                        cd_cobertura=int(cd_cobertura),
                        cd_produto=int(policy_data.get('cd_produto', 1)),
                        score_risco=coverage_score,
                        nivel_risco=str(nivel_risco),
                        probabilidade=coverage_score / 100.0,
                        modelo_usado='coverage_model_v2',
                        versao_modelo='2.0',
                        fatores_risco={"fonte": "inclusao_apolice_basico"},
                        dados_climaticos={"temperatura": int(25), "umidade": int(random.randint(40, 80))},
                        dados_propriedade={"valor": float(policy_data['valor_segurado']), "tipo": str(policy_data['tipo_residencia'])},
                        resultado_predicao={"score": coverage_score, "confianca": float(0.8)},
                        confianca_modelo=float(0.8),
                        explicabilidade={"principais_fatores": ["localizacao", "tipo_residencia"]},
                        tempo_processamento_ms=int(random.randint(50, 150))
                    )
                    
                    coverage_risks.append(risco_data)
                
                # Salvar an√°lises b√°sicas
                if coverage_risks:
                    result_ids = dao.salvar_multiplos_riscos(coverage_risks)
                    if result_ids:
                        st.info(f"üíæ Salvas {len(result_ids)} an√°lises b√°sicas de risco por cobertura")
        
    except Exception as e:
        st.warning(f"‚ö†Ô∏è Erro ao salvar an√°lises de risco por cobertura: {e}")

def get_risk_level_from_score(score):
    """Converter score num√©rico para n√≠vel de risco"""
    if score >= 75:
        return "alto"
    elif score >= 50:
        return "medio"
    elif score >= 25:
        return "baixo"
    else:
        return "muito_baixo"

def save_policy_simple(policy_data, risk_data):
    """Salva ap√≥lice residencial em banco SQLite simples"""
    try:
        import sqlite3
        import os
        
        # Garantir que o diret√≥rio existe
        os.makedirs('database', exist_ok=True)
        
        # Conectar ao banco
        conn = sqlite3.connect('database/radar_sinistro.db')
        cursor = conn.cursor()
        
        # Verificar se a ap√≥lice j√° existe
        cursor.execute('SELECT id FROM apolices WHERE numero_apolice = ?', (policy_data['numero_apolice'],))
        existing = cursor.fetchone()
        
        if existing:
            conn.close()
            st.warning(f"Ap√≥lice {policy_data['numero_apolice']} j√° existe no banco de dados")
            return existing[0]  # Retorna o ID existente
        
        # Criar tabela se n√£o existir (usar mesma estrutura da tabela principal)
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS apolices (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                numero_apolice TEXT UNIQUE,
                segurado TEXT,
                cep TEXT,
                latitude REAL,
                longitude REAL,
                tipo_residencia TEXT,
                valor_segurado REAL,
                data_contratacao TEXT,
                ativa INTEGER DEFAULT 1,
                created_at TEXT,
                updated_at TEXT,
                data_inicio TEXT,
                score_risco REAL,
                nivel_risco TEXT,
                probabilidade_sinistro REAL
            )
        ''')
        
        # Inserir dados na tabela principal apolices
        cursor.execute('''
            INSERT INTO apolices 
            (numero_apolice, segurado, cep, valor_segurado, 
             data_inicio, tipo_residencia, score_risco, nivel_risco, 
             probabilidade_sinistro, created_at, data_contratacao, ativa,
             latitude, longitude)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            policy_data['numero_apolice'],
            policy_data.get('segurado', 'N/A'),
            policy_data['cep'],
            float(policy_data['valor_segurado']),
            policy_data['data_inicio'],
            policy_data.get('tipo_residencia', 'casa'),
            float(risk_data['score_risco']),
            risk_data['nivel_risco'],
            float(risk_data['probabilidade']),
            datetime.now().isoformat(),
            policy_data['data_inicio'],  # data_contratacao = data_inicio
            1,  # ativa = 1
            -15.0,  # latitude padr√£o (centro do Brasil)
            -47.0   # longitude padr√£o (centro do Brasil)
        ))
        
        policy_id = cursor.lastrowid
        
        # NOVO: Salvar coberturas no banco simples tamb√©m
        if 'cd_coberturas' in policy_data and policy_data['cd_coberturas']:
            # Criar tabela apolice_cobertura se n√£o existir
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS apolice_cobertura (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    cd_cobertura INTEGER,
                    cd_produto INTEGER,
                    nr_apolice VARCHAR(50),
                    dt_inclusao DATE,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # Inserir v√≠nculos das coberturas
            for cd_cobertura in policy_data['cd_coberturas']:
                cursor.execute('''
                    INSERT INTO apolice_cobertura 
                    (nr_apolice, cd_cobertura, cd_produto, dt_inclusao)
                    VALUES (?, ?, ?, ?)
                ''', (
                    policy_data['numero_apolice'],
                    cd_cobertura,
                    policy_data.get('cd_produto', 1),
                    policy_data['data_inicio']
                ))
        
        conn.commit()
        conn.close()
        
        # NOVO: Salvar an√°lises de risco por cobertura tamb√©m no fallback
        if policy_id:
            try:
                save_coverage_risk_analysis(policy_data, risk_data)
            except Exception as e:
                st.warning(f"‚ö†Ô∏è An√°lises de risco por cobertura n√£o salvas: {e}")
        
        return policy_id
        
    except Exception as e:
        st.error(f"Erro ao salvar no banco simples: {e}")
        return None

def show_manage_policies():
    """P√°gina principal de gerenciamento de ap√≥lices residenciais"""
    
    st.markdown("""
    <div class="main-header">
        <h2>üè† GERENCIAMENTO DE AP√ìLICES RESIDENCIAIS</h2>
        <p>Inclus√£o individual e em lote com c√°lculo autom√°tico de risco clim√°tico</p>
        <p style="font-size: 0.9em; opacity: 0.8;">
            üå¶Ô∏è Sistema especializado em an√°lise de riscos residenciais baseado em dados clim√°ticos
        </p>
    </div>
    """, unsafe_allow_html=True)
    
    # Tabs para diferentes funcionalidades
    tab1, tab2, tab3, tab4 = st.tabs(["üìù Inclus√£o Individual", "üìã Inclus√£o em Lote", "üìä Ranking Atualizado", "üå¶Ô∏è An√°lise Clim√°tica"])
    
    with tab1:
        show_individual_policy_form()
    
    with tab2:
        show_batch_policy_upload()
    
    with tab3:
        show_updated_ranking()
    
    with tab4:
        show_climate_risk_analysis()

def show_individual_policy_form():
    """Formul√°rio para inclus√£o individual de ap√≥lices residenciais"""
    
    st.subheader("Nova Ap√≥lice Residencial")
    
    # Carregar produtos dispon√≠veis
    try:
        from database import get_database, CRUDOperations
        db = get_database()
        crud = CRUDOperations(db)
        
        # Buscar produtos do ramo residencial (assumindo cd_ramo = 1 para residencial)
        produtos_residenciais = crud.get_produtos_by_ramo(1)
        
        if not produtos_residenciais:
            st.warning("‚ö†Ô∏è Nenhum produto residencial encontrado. Verifique se os produtos foram cadastrados.")
            return
            
        # Preparar op√ß√µes para o combobox
        opcoes_produtos = {f"{p.nm_produto}": p.cd_produto for p in produtos_residenciais}
        nomes_produtos = list(opcoes_produtos.keys())
        
    except Exception as e:
        st.error(f"‚ùå Erro ao carregar produtos: {e}")
        return
    
    with st.form("individual_policy_form"):
        col1, col2 = st.columns(2)
        
        with col1:
            # Campo Nome do Produto - NOVO
            nome_produto = st.selectbox(
                "Nome do Produto *",
                options=nomes_produtos,
                help="Selecione o produto de seguro residencial"
            )
            
            # Campo Coberturas - NOVO (baseado no produto selecionado)
            cd_produto_selecionado = opcoes_produtos[nome_produto]
            try:
                coberturas_produto = crud.get_coberturas_by_produto(cd_produto_selecionado)
                
                if coberturas_produto:
                    opcoes_coberturas = {f"{c.nm_cobertura}{'*' if c.dv_basica else ''}": c.cd_cobertura for c in coberturas_produto}
                    nomes_coberturas = list(opcoes_coberturas.keys())
                    
                    coberturas_selecionadas = st.multiselect(
                        "Coberturas *",
                        options=nomes_coberturas,
                        help="Selecione as coberturas desejadas. Coberturas marcadas com (*) s√£o b√°sicas."
                    )
                else:
                    st.warning("‚ö†Ô∏è Nenhuma cobertura encontrada para este produto.")
                    coberturas_selecionadas = []
                    opcoes_coberturas = {}
                    
            except Exception as e:
                st.error(f"‚ùå Erro ao carregar coberturas: {e}")
                coberturas_selecionadas = []
                opcoes_coberturas = {}
            
            numero_apolice = st.text_input(
                "N√∫mero da Ap√≥lice *",
                placeholder="Ex: POL-2024-001234",
                help="N√∫mero √∫nico da ap√≥lice"
            )
            
            segurado = st.text_input(
                "Nome do Segurado *",
                placeholder="Ex: Jo√£o Silva Santos",
                help="Nome completo do segurado"
            )
            
            email = st.text_input(
                "Email",
                placeholder="Ex: joao.silva@email.com",
                help="Email do segurado para contato"
            )
            
            telefone = st.text_input(
                "Telefone",
                placeholder="Ex: (11) 99999-9999",
                help="Telefone do segurado para contato"
            )
            
            cep = st.text_input(
                "CEP *",
                placeholder="Ex: 01234-567",
                help="CEP do local segurado"
            )
            
            valor_segurado = st.number_input(
                "Valor Segurado (R$) *",
                min_value=1000.0,
                max_value=10000000.0,
                value=50000.0,
                step=1000.0,
                help="Valor total da cobertura"
            )
        
        with col2:
            data_inicio = st.date_input(
                "Data de In√≠cio da Vig√™ncia *",
                value=datetime.now().date(),
                help="Data de in√≠cio da cobertura"
            )
            
            tipo_residencia = st.selectbox(
                "Tipo de Resid√™ncia *",
                ["Casa", "Apartamento", "Sobrado", "Kitnet"],
                help="Tipo de resid√™ncia a ser segurada"
            )
            
           
        # Bot√µes do formul√°rio
        col1, col2, col3 = st.columns([1, 1, 1])
        
        with col2:
            submitted = st.form_submit_button("üîÆ Calcular Risco e Salvar", width='stretch')
    
    # Processar formul√°rio
    if submitted:
        # Validar campos obrigat√≥rios
        if not all([nome_produto, numero_apolice, segurado, cep, valor_segurado, tipo_residencia]):
            st.error("‚ùå Por favor, preencha todos os campos obrigat√≥rios!")
            return
        
        # Validar coberturas selecionadas
        if not coberturas_selecionadas:
            st.error("‚ùå Por favor, selecione pelo menos uma cobertura!")
            return
        
        # Valida√ß√µes adicionais
        if len(cep.replace('-', '').replace(' ', '')) != 8:
            st.error("‚ùå CEP deve ter 8 d√≠gitos (formato: 12345-678)")
            return
            
        if not cep.replace('-', '').replace(' ', '').isdigit():
            st.error("‚ùå CEP deve conter apenas n√∫meros")
            return
        
        # Obter c√≥digo do produto selecionado
        cd_produto_selecionado = opcoes_produtos[nome_produto]
        
        # Obter c√≥digos das coberturas selecionadas
        cd_coberturas_selecionadas = [opcoes_coberturas[nome_cob] for nome_cob in coberturas_selecionadas]
        
        # Preparar dados (foco residencial)
        try:
            policy_data = {
                'numero_apolice': numero_apolice.strip(),
                'segurado': segurado.strip(),
                'cep': cep.strip(),
                'valor_segurado': float(valor_segurado),
                'data_inicio': data_inicio.isoformat(),
                'tipo_residencia': tipo_residencia,
                'cd_produto': cd_produto_selecionado,
                'nome_produto': nome_produto,
                'cd_coberturas': cd_coberturas_selecionadas  # NOVO: coberturas selecionadas
            }
        except Exception as e:
            st.error(f"‚ùå Erro ao preparar dados: {e}")
            return

        # DESABILITADO: Checar bloqueio de regi√£o (feature removida)
        # if 'REGION_BLOCK_FEATURE_ENABLED' in globals() and REGION_BLOCK_FEATURE_ENABLED:
        #     try:
        #         db = get_database()
        #         crud = CRUDOperations(db)
        #         blocked, reason, severity = crud.is_cep_blocked(policy_data['cep'], scope='residencial')
        #         if blocked:
        #             emoji = '‚õî'
        #             sev_label = {1: 'Normal', 2: 'Alto', 3: 'Cr√≠tico'}.get(severity, 'Alto')
        #             st.error(f"{emoji} Emiss√£o bloqueada para regi√£o (prefixo CEP) - Motivo: {reason or 'Alto risco'} (Severidade: {sev_label})")
        #             return
        #     except Exception as e:
        #         # Fail-open: apenas logar aviso
        #         st.warning(f"‚ö†Ô∏è N√£o foi poss√≠vel validar bloqueio de regi√£o: {e}")
        
        # Calcular risco espec√≠fico por cobertura
        coverage_risk_data = None
        if coberturas_selecionadas:
            with st.spinner("üéØ Analisando risco espec√≠fico por cobertura..."):
                coverage_risk_data = calculate_coverage_specific_risk(policy_data, coberturas_selecionadas)
        
        # Mostrar resultado apenas se h√° coberturas selecionadas
        if coverage_risk_data and coverage_risk_data['has_specific_analysis']:
            st.markdown("### üìä An√°lise de Risco por Cobertura")
            
            coverage_analysis = coverage_risk_data['coverage_analysis']
            
            # Mostrar resumo da an√°lise por cobertura
            col1, col2 = st.columns(2)
            
            with col1:
                overall_level = coverage_analysis['summary']['overall_risk_level']
                emoji_coverage = get_risk_level_emoji(coverage_analysis['summary']['average_risk_score'])
                st.metric(
                    "Risco M√©dio das Coberturas",
                    f"{emoji_coverage} {overall_level.upper()}",
                    f"{coverage_analysis['summary']['average_risk_score']:.1f}/100"
                )
            
            with col2:
                analyzed_count = coverage_analysis['summary']['total_coverages_analyzed']
                total_selected = coverage_risk_data.get('analysis_info', {}).get('total_selected', analyzed_count)
                st.metric(
                    "Coberturas Analisadas",
                    f"{analyzed_count}/{total_selected}",
                    help="N√∫mero de coberturas com an√°lise clim√°tica espec√≠fica"
                )
            
            # Mostrar informa√ß√µes sobre coberturas n√£o analisadas
            analysis_info = coverage_risk_data.get('analysis_info', {})
            if analysis_info.get('unavailable'):
                with st.expander("‚ÑπÔ∏è Informa√ß√µes sobre Coberturas"):
                    st.info(f"‚úÖ **Analisadas**: {', '.join([c.replace('_', ' ').title() for c in coverage_analysis['coverage_analysis'].keys()])}")
                    st.warning(f"‚ö†Ô∏è **Sem modelo espec√≠fico**: {', '.join(analysis_info['unavailable'])}")
                    st.markdown("üí° *Coberturas sem modelo espec√≠fico n√£o s√£o inclu√≠das na an√°lise clim√°tica*")
            
            # Detalhes por cobertura
            if coverage_analysis['coverage_analysis']:
                st.markdown("#### üõ°Ô∏è An√°lise Individual por Cobertura:")
                
                for coverage_key, details in coverage_analysis['coverage_analysis'].items():
                    if 'error' not in details:
                        with st.container():
                            col1, col2, col3, col4 = st.columns(4)
                            
                            coverage_name = coverage_key.replace('_', ' ').title()
                            risk_score = details['risk_score']
                            risk_level = details['risk_level']
                            
                            with col1:
                                st.write(f"**üõ°Ô∏è {coverage_name}**")
                            with col2:
                                emoji_cov = get_risk_level_emoji(risk_score)
                                st.write(f"{emoji_cov} {risk_level.upper()}")
                            with col3:
                                st.write(f"**{risk_score:.1f}/100**")
                            with col4:
                                if risk_score > 70:
                                    st.write("üî¥ **Alta Aten√ß√£o**")
                                elif risk_score > 40:
                                    st.write("üü° **Monitorar**")
                                else:
                                    st.write("üü¢ **Normal**")
                            
                            st.markdown("---")
            
            # Mostrar recomenda√ß√µes espec√≠ficas
            recommendations = coverage_risk_data['recommendations']
            if recommendations:
                with st.expander(f"‚ö†Ô∏è Recomenda√ß√µes Clim√°ticas ({len(recommendations)})"):
                    for i, rec in enumerate(recommendations, 1):
                        # rec √© uma string simples, n√£o um dicion√°rio
                        st.markdown(f"**{i}.** {rec}")
                        st.markdown("---")
            
            # Preparar dados de risco baseados na an√°lise por cobertura para salvar no banco
            risk_data = {
                'score_risco': coverage_analysis['summary']['average_risk_score'],
                'nivel_risco': coverage_analysis['summary']['overall_risk_level'],
                'probabilidade': coverage_analysis['summary']['average_risk_score'] / 100,
                'fatores_risco': coverage_analysis['summary'].get('critical_factors', [])
            }
            
            # Salvar no banco
            with st.spinner("üíæ Salvando ap√≥lice no banco de dados..."):
                policy_id = save_policy_to_database(policy_data, risk_data)
            
            if policy_id:
                st.success(f"‚úÖ Ap√≥lice **{numero_apolice}** salva com sucesso! ID: {policy_id}")
                
                # Mostrar coberturas selecionadas
                st.info(f"üìã Coberturas inclu√≠das: {', '.join(coberturas_selecionadas)}")
                st.info(f"üéØ Risco calculado baseado em an√°lise espec√≠fica por cobertura")
        
        else:
            # Se n√£o h√° coberturas selecionadas ou an√°lise n√£o est√° dispon√≠vel
            if not coberturas_selecionadas:
                st.warning("‚ö†Ô∏è Nenhuma cobertura foi selecionada.")
                st.info("üí° Selecione pelo menos uma cobertura para calcular o risco espec√≠fico.")
            elif coverage_risk_data and coverage_risk_data.get('error'):
                st.error(f"‚ùå {coverage_risk_data['error']}")
                st.info("üí° Tente selecionar coberturas que possuem modelos espec√≠ficos: **Danos El√©tricos**, **Vendaval**, **Granizo** ou **Alagamento**.")
            else:
                st.warning("‚ö†Ô∏è A an√°lise espec√≠fica por cobertura n√£o est√° dispon√≠vel.")
                st.info("üí° Verifique se o sistema de modelos est√° funcionando corretamente.")
            return

def show_batch_policy_upload():
    """Interface para upload em lote de ap√≥lices"""
    
    st.subheader("Inclus√£o em Lote")
    
    # Upload de arquivo - PRIMEIRO
    st.markdown("### Upload do Arquivo")
    
    ''' 
    st.warning("""
    **‚ö†Ô∏è Problemas comuns a evitar:**
    - Campo 'segurado' vazio ou com apenas espa√ßos
    - Nomes muito curtos (menos de 3 caracteres)
    - Caracteres especiais mal formatados (problemas de encoding)
    - CEP sem os 8 d√≠gitos obrigat√≥rios
    """)
    '''

    uploaded_file = st.file_uploader(
        "Escolha o arquivo CSV ou Excel com as ap√≥lices",
        type=['csv', 'xlsx', 'xls'],
        help="Arquivo deve seguir o formato do template. Excel permite incluir coberturas em planilha separada."
    )
    
    if uploaded_file is not None:
        try:
            file_extension = uploaded_file.name.split('.')[-1].lower()
            
            # Processar arquivo baseado na extens√£o
            if file_extension == 'csv':
                # Ler arquivo CSV com encoding adequado para caracteres especiais
                try:
                    df = pd.read_csv(uploaded_file, encoding='utf-8')
                    df_coberturas = None  # CSV n√£o tem planilha de coberturas
                except UnicodeDecodeError:
                    uploaded_file.seek(0)
                    df = pd.read_csv(uploaded_file, encoding='latin-1')
                    df_coberturas = None
                    st.warning("Arquivo CSV lido com encoding latin-1. Recomenda-se salvar como UTF-8.")
                except Exception:
                    uploaded_file.seek(0)
                    df = pd.read_csv(uploaded_file)
                    df_coberturas = None
                    
            elif file_extension in ['xlsx', 'xls']:
                # Ler arquivo Excel
                try:
                    # Verificar se openpyxl est√° dispon√≠vel
                    try:
                        import openpyxl
                    except ImportError:
                        st.error("‚ùå Depend√™ncia 'openpyxl' n√£o encontrada para leitura de arquivos Excel.")
                        with st.expander("üîß Como resolver"):
                            st.code("pip install openpyxl", language="bash")
                            st.info("Execute o comando acima no terminal e recarregue a p√°gina.")
                        return
                    
                    # Ler planilha de ap√≥lices
                    df = pd.read_excel(uploaded_file, sheet_name='Apolices', engine='openpyxl')
                    
                    # Tentar ler planilha de coberturas
                    try:
                        uploaded_file.seek(0)
                        df_coberturas = pd.read_excel(uploaded_file, sheet_name='Coberturas', engine='openpyxl')
                        st.success(f"‚úÖ Arquivo Excel carregado: {len(df)} ap√≥lices e {len(df_coberturas)} coberturas encontradas")
                    except Exception:
                        df_coberturas = None
                        st.info("‚ÑπÔ∏è Planilha 'Coberturas' n√£o encontrada ou vazia. Processando apenas ap√≥lices.")
                        
                except Exception as e:
                    st.error(f"‚ùå Erro ao ler arquivo Excel: {e}")
                    if "openpyxl" in str(e):
                        with st.expander("üîß Como resolver"):
                            st.code("pip install openpyxl", language="bash")
                            st.info("Execute o comando acima no terminal e recarregue a p√°gina.")
                    return
            else:
                st.error("‚ùå Formato de arquivo n√£o suportado!")
                return
            
            if df_coberturas is None:
                st.success(f"‚úÖ Arquivo carregado: {len(df)} ap√≥lices encontradas")
            
            # Mostrar preview das ap√≥lices
            st.markdown("### Preview dos Dados - Ap√≥lices")
            st.dataframe(df.head(10), width='stretch')
            
            # Mostrar preview das coberturas se dispon√≠vel
            if df_coberturas is not None and not df_coberturas.empty:
                st.markdown("### Preview dos Dados - Coberturas")
                st.dataframe(df_coberturas.head(10), width='stretch')
            
            # Validar dados das ap√≥lices
            required_columns = ['numero_apolice', 'segurado', 'nome_produto', 'cep', 'valor_segurado', 'data_inicio', 'tipo_residencia']
            missing_columns = [col for col in required_columns if col not in df.columns]
            
            if missing_columns:
                st.error(f"‚ùå Colunas obrigat√≥rias faltando na planilha de ap√≥lices: {', '.join(missing_columns)}")
                return
            
            # Validar dados das coberturas se dispon√≠vel
            if df_coberturas is not None and not df_coberturas.empty:
                required_cob_columns = ['numero_apolice', 'nome_cobertura']
                missing_cob_columns = [col for col in required_cob_columns if col not in df_coberturas.columns]
                
                if missing_cob_columns:
                    st.error(f"‚ùå Colunas obrigat√≥rias faltando na planilha de coberturas: {', '.join(missing_cob_columns)}")
                    return
            
            # Valida√ß√£o pr√©via dos dados
            st.markdown("### üîç Valida√ß√£o dos Dados")
            validation_results = validate_batch_data(df, df_coberturas)
            
            if validation_results['errors']:
                st.error("‚ùå Problemas encontrados nos dados:")
                for error in validation_results['errors']:
                    st.error(f"‚Ä¢ {error['source']} - Linha {error['row']}: {error['message']}")
                st.info("üí° Corrija os problemas no arquivo e fa√ßa upload novamente.")
                return
            
            if validation_results['warnings']:
                st.warning("‚ö†Ô∏è Avisos encontrados:")
                for warning in validation_results['warnings']:
                    st.warning(f"‚Ä¢ {warning['source']} - Linha {warning['row']}: {warning['message']}")
            
            st.success(f"‚úÖ Valida√ß√£o conclu√≠da: {len(df)} ap√≥lices v√°lidas para processamento")
            
            # Bot√£o para processar lote
            if st.button("Processar Lote Completo", width='stretch'):
                process_batch_policies(df, df_coberturas)
                
        except Exception as e:
            st.error(f"‚ùå Erro ao processar arquivo: {e}")
    
    # Separador visual
    st.markdown("---")
    
    # Template para download - SEGUNDO
    st.markdown("### Template para Download")
    
    # Carregar produtos dispon√≠veis para mostrar no template
    try:
        from database import get_database, CRUDOperations
        db = get_database()
        crud = CRUDOperations(db)
        produtos_residenciais = crud.get_produtos_by_ramo(1)
        
        if produtos_residenciais:
            st.info(f"""
            **Instru√ß√µes para preenchimento:**
            - **numero_apolice**: C√≥digo √∫nico da ap√≥lice (obrigat√≥rio)
            - **segurado**: Nome completo do segurado (obrigat√≥rio, m√≠nimo 3 caracteres)
            - **nome_produto**: Nome do produto de seguro (obrigat√≥rio)
            - **cep**: C√≥digo postal com 8 d√≠gitos (pode incluir h√≠fen)
            - **valor_segurado**: Valor em reais (obrigat√≥rio, maior que zero)
            - **data_inicio**: Data no formato AAAA-MM-DD
            - **tipo_residencia**: Casa, Apartamento, Sobrado ou Kitnet
            
            **Produtos dispon√≠veis:** {', '.join([p.nm_produto for p in produtos_residenciais])}
            
            **Para coberturas:** Use a planilha 'Coberturas' do arquivo Excel com as colunas:
            - **numero_apolice**: Refer√™ncia √† ap√≥lice
            - **nome_cobertura**: Nome da cobertura desejada
            """)
        else:
            st.warning("‚ö†Ô∏è Nenhum produto encontrado. Contate o administrador.")
            
    except Exception as e:
        st.error(f"Erro ao carregar produtos: {e}")
    
    # Criar template com os novos campos
    template_data = pd.DataFrame({
        'numero_apolice': ['POL-2024-000001', 'POL-2024-000002', 'POL-2024-000003'],
        'segurado': ['Jo√£o Silva Santos', 'Maria Oliveira Costa', 'Pedro Henrique Ferreira'],
        'nome_produto': ['Residencial B√°sico', 'Residencial Premium', 'Residencial B√°sico'],
        'cep': ['01234-567', '89012345', '13579-024'],
        'valor_segurado': [300000.0, 450000.0, 180000.0],
        'data_inicio': ['2024-10-07', '2024-10-07', '2024-10-07'],
        'tipo_residencia': ['Casa', 'Apartamento', 'Sobrado'],
        'email': ['joao.silva@email.com', 'maria.oliveira@email.com', 'pedro.ferreira@email.com'],
        'telefone': ['(11) 98765-4321', '(21) 99876-5432', '(31) 97654-3210']
    })
    
    st.dataframe(template_data, width='stretch')
    
    # Template de coberturas
    st.markdown("#### Template de Coberturas")
    template_coberturas = pd.DataFrame({
        'numero_apolice': ['POL-2024-000001', 'POL-2024-000001', 'POL-2024-000002', 'POL-2024-000002', 'POL-2024-000003'],
        'nome_cobertura': ['Inc√™ndio', 'Vendaval', 'Inc√™ndio', 'Danos El√©tricos', 'Roubo']
    })
    
    st.dataframe(template_coberturas, width='stretch')
    
    # Criar arquivo Excel com duas planilhas
    try:
        import io
        
        # Verificar se xlsxwriter est√° dispon√≠vel
        try:
            import xlsxwriter
        except ImportError:
            st.warning("‚ö†Ô∏è Depend√™ncia 'xlsxwriter' n√£o encontrada. Apenas template CSV dispon√≠vel.")
            st.info("Para habilitar download Excel: `pip install xlsxwriter`")
        else:
            output = io.BytesIO()
            with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                template_data.to_excel(writer, sheet_name='Apolices', index=False)
                template_coberturas.to_excel(writer, sheet_name='Coberturas', index=False)
            
            excel_data = output.getvalue()
            
            st.download_button(
                label="üì• Baixar Template Excel (Recomendado)",
                data=excel_data,
                file_name=f"template_apolices_coberturas_{datetime.now().strftime('%Y%m%d')}.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
        
    except Exception as e:
        st.warning(f"Erro ao gerar template Excel: {e}")
    
    # Fallback: CSV simples para ap√≥lices
    csv_template = template_data.to_csv(index=False)
    st.download_button(
        label="üìÑ Baixar Template CSV (Apenas Ap√≥lices)",
        data=csv_template,
        file_name=f"template_apolices_{datetime.now().strftime('%Y%m%d')}.csv",
        mime="text/csv"
    )

def validate_batch_data(df, df_coberturas=None):
    """Valida dados do lote antes do processamento"""
    errors = []
    warnings = []
    
    # Carregar dados de refer√™ncia para valida√ß√£o
    try:
        from database import get_database, CRUDOperations
        db = get_database()
        crud = CRUDOperations(db)
        produtos_residenciais = crud.get_produtos_by_ramo(1)
        nomes_produtos_validos = [p.nm_produto for p in produtos_residenciais]
        
        # Criar mapeamento de produto para coberturas
        produto_coberturas = {}
        for produto in produtos_residenciais:
            coberturas = crud.get_coberturas_by_produto(produto.cd_produto)
            produto_coberturas[produto.nm_produto] = [c.nm_cobertura for c in coberturas]
            
    except Exception as e:
        errors.append({'source': 'Sistema', 'row': 0, 'message': f'Erro ao carregar dados de refer√™ncia: {e}'})
        return {'errors': errors, 'warnings': warnings}
    
    # Validar ap√≥lices
    for index, row in df.iterrows():
        row_num = index + 1
        
        # Validar numero_apolice
        if pd.isna(row['numero_apolice']) or str(row['numero_apolice']).strip() == '':
            errors.append({'source': 'Ap√≥lices', 'row': row_num, 'message': 'N√∫mero da ap√≥lice √© obrigat√≥rio'})
        
        # Validar segurado
        if pd.isna(row['segurado']) or str(row['segurado']).strip() == '':
            errors.append({'source': 'Ap√≥lices', 'row': row_num, 'message': 'Nome do segurado √© obrigat√≥rio'})
        elif len(str(row['segurado']).strip()) < 3:
            errors.append({'source': 'Ap√≥lices', 'row': row_num, 'message': 'Nome do segurado deve ter pelo menos 3 caracteres'})
        
        # Validar nome_produto
        if pd.isna(row['nome_produto']) or str(row['nome_produto']).strip() == '':
            errors.append({'source': 'Ap√≥lices', 'row': row_num, 'message': 'Nome do produto √© obrigat√≥rio'})
        elif str(row['nome_produto']).strip() not in nomes_produtos_validos:
            errors.append({'source': 'Ap√≥lices', 'row': row_num, 'message': f'Produto "{row["nome_produto"]}" n√£o encontrado. Produtos v√°lidos: {", ".join(nomes_produtos_validos)}'})
        
        # Validar CEP
        if pd.isna(row['cep']) or str(row['cep']).strip() == '':
            errors.append({'source': 'Ap√≥lices', 'row': row_num, 'message': 'CEP √© obrigat√≥rio'})
        else:
            cep_clean = str(row['cep']).strip().replace('-', '')
            if len(cep_clean) != 8 or not cep_clean.isdigit():
                errors.append({'source': 'Ap√≥lices', 'row': row_num, 'message': 'CEP deve ter 8 d√≠gitos (formato: 12345-678 ou 12345678)'})
        
        # Validar valor_segurado
        if pd.isna(row['valor_segurado']):
            errors.append({'source': 'Ap√≥lices', 'row': row_num, 'message': 'Valor segurado √© obrigat√≥rio'})
        else:
            try:
                valor = float(row['valor_segurado'])
                if valor <= 0:
                    errors.append({'source': 'Ap√≥lices', 'row': row_num, 'message': 'Valor segurado deve ser maior que zero'})
                elif valor < 10000:
                    warnings.append({'source': 'Ap√≥lices', 'row': row_num, 'message': 'Valor segurado muito baixo (menor que R$ 10.000)'})
                elif valor > 5000000:
                    warnings.append({'source': 'Ap√≥lices', 'row': row_num, 'message': 'Valor segurado muito alto (maior que R$ 5.000.000)'})
            except ValueError:
                errors.append({'source': 'Ap√≥lices', 'row': row_num, 'message': 'Valor segurado deve ser um n√∫mero v√°lido'})
        
        # Validar data_inicio
        if pd.isna(row['data_inicio']) or str(row['data_inicio']).strip() == '':
            errors.append({'source': 'Ap√≥lices', 'row': row_num, 'message': 'Data de in√≠cio √© obrigat√≥ria'})
        
        # Validar tipo_residencia
        if pd.isna(row.get('tipo_residencia')):
            warnings.append({'source': 'Ap√≥lices', 'row': row_num, 'message': 'Tipo de resid√™ncia n√£o informado, ser√° usado "Casa" como padr√£o'})
        else:
            tipos_validos = ['Casa', 'Apartamento', 'Sobrado', 'Kitnet']
            if str(row['tipo_residencia']).strip() not in tipos_validos:
                warnings.append({'source': 'Ap√≥lices', 'row': row_num, 'message': f'Tipo de resid√™ncia "{row["tipo_residencia"]}" n√£o √© padr√£o. Tipos recomendados: {", ".join(tipos_validos)}'})
    
    # Validar coberturas se dispon√≠vel
    if df_coberturas is not None and not df_coberturas.empty:
        apolices_no_arquivo = set(df['numero_apolice'].astype(str))
        
        for index, row in df_coberturas.iterrows():
            row_num = index + 1
            
            # Validar numero_apolice
            if pd.isna(row['numero_apolice']) or str(row['numero_apolice']).strip() == '':
                errors.append({'source': 'Coberturas', 'row': row_num, 'message': 'N√∫mero da ap√≥lice √© obrigat√≥rio'})
            elif str(row['numero_apolice']).strip() not in apolices_no_arquivo:
                errors.append({'source': 'Coberturas', 'row': row_num, 'message': f'Ap√≥lice "{row["numero_apolice"]}" n√£o encontrada na planilha de ap√≥lices'})
            
            # Validar nome_cobertura
            if pd.isna(row['nome_cobertura']) or str(row['nome_cobertura']).strip() == '':
                errors.append({'source': 'Coberturas', 'row': row_num, 'message': 'Nome da cobertura √© obrigat√≥rio'})
            else:
                # Validar se a cobertura existe para o produto da ap√≥lice
                numero_apolice = str(row['numero_apolice']).strip()
                nome_cobertura = str(row['nome_cobertura']).strip()
                
                # Encontrar o produto da ap√≥lice
                apolice_row = df[df['numero_apolice'].astype(str) == numero_apolice]
                if not apolice_row.empty:
                    nome_produto = str(apolice_row.iloc[0]['nome_produto']).strip()
                    if nome_produto in produto_coberturas:
                        coberturas_validas = produto_coberturas[nome_produto]
                        if nome_cobertura not in coberturas_validas:
                            errors.append({'source': 'Coberturas', 'row': row_num, 'message': f'Cobertura "{nome_cobertura}" n√£o dispon√≠vel para produto "{nome_produto}". Coberturas v√°lidas: {", ".join(coberturas_validas)}'})
    
    return {'errors': errors, 'warnings': warnings}

def process_batch_policies(df, df_coberturas=None):
    """Processa lote de ap√≥lices com c√°lculo de risco e coberturas"""
    
    progress_bar = st.progress(0)
    status_text = st.empty()
    results_container = st.container()
    
    successful_policies = []
    failed_policies = []
    
    total_policies = len(df)
    
    # Carregar dados de produtos para convers√£o
    try:
        from database import get_database, CRUDOperations
        db = get_database()
        crud = CRUDOperations(db)
        produtos_residenciais = crud.get_produtos_by_ramo(1)
        nome_para_codigo_produto = {p.nm_produto: p.cd_produto for p in produtos_residenciais}
        
        # Preparar mapeamento de coberturas se dispon√≠vel
        coberturas_por_apolice = {}
        if df_coberturas is not None and not df_coberturas.empty:
            for _, row in df_coberturas.iterrows():
                numero_apolice = str(row['numero_apolice']).strip()
                nome_cobertura = str(row['nome_cobertura']).strip()
                
                if numero_apolice not in coberturas_por_apolice:
                    coberturas_por_apolice[numero_apolice] = []
                coberturas_por_apolice[numero_apolice].append(nome_cobertura)
                
    except Exception as e:
        st.error(f"‚ùå Erro ao carregar dados de produtos: {e}")
        return
    
    for index, row in df.iterrows():
        # Atualizar progresso
        progress = (index + 1) / total_policies
        progress_bar.progress(progress)
        status_text.text(f"Processando ap√≥lice {index + 1} de {total_policies}: {row['numero_apolice']}")
        
        try:
            # Validar dados obrigat√≥rios da linha
            if pd.isna(row['numero_apolice']) or str(row['numero_apolice']).strip() == '':
                raise ValueError("N√∫mero da ap√≥lice √© obrigat√≥rio")
            
            if pd.isna(row['segurado']) or str(row['segurado']).strip() == '':
                raise ValueError("Nome do segurado √© obrigat√≥rio")
            
            if pd.isna(row['nome_produto']) or str(row['nome_produto']).strip() == '':
                raise ValueError("Nome do produto √© obrigat√≥rio")
            
            if pd.isna(row['cep']) or str(row['cep']).strip() == '':
                raise ValueError("CEP √© obrigat√≥rio")
            
            if pd.isna(row['valor_segurado']) or float(row['valor_segurado']) <= 0:
                raise ValueError("Valor segurado deve ser maior que zero")
            
            # Obter c√≥digo do produto
            nome_produto = str(row['nome_produto']).strip()
            if nome_produto not in nome_para_codigo_produto:
                raise ValueError(f"Produto '{nome_produto}' n√£o encontrado")
            
            cd_produto = nome_para_codigo_produto[nome_produto]
            
            # Preparar dados da ap√≥lice
            numero_apolice = str(row['numero_apolice']).strip()
            policy_data = {
                'numero_apolice': numero_apolice,
                'segurado': str(row['segurado']).strip(),
                'cep': str(row['cep']).strip().replace('-', ''),
                'valor_segurado': float(row['valor_segurado']),
                'data_inicio': str(row['data_inicio']),
                'tipo_residencia': str(row['tipo_residencia']).strip() if pd.notna(row.get('tipo_residencia')) else 'Casa',
                'cd_produto': cd_produto,
                'nome_produto': nome_produto,
                'email': str(row['email']).strip() if pd.notna(row.get('email')) and str(row.get('email')).strip() != '' else None,
                'telefone': str(row['telefone']).strip() if pd.notna(row.get('telefone')) and str(row.get('telefone')).strip() != '' else None
            }
            
            # Processar coberturas se dispon√≠vel
            if numero_apolice in coberturas_por_apolice:
                nomes_coberturas = coberturas_por_apolice[numero_apolice]
                
                # Converter nomes de coberturas para c√≥digos
                cd_coberturas = []
                coberturas_produto = crud.get_coberturas_by_produto(cd_produto)
                nome_para_codigo_cobertura = {c.nm_cobertura: c.cd_cobertura for c in coberturas_produto}
                
                for nome_cob in nomes_coberturas:
                    if nome_cob in nome_para_codigo_cobertura:
                        cd_coberturas.append(nome_para_codigo_cobertura[nome_cob])
                    else:
                        raise ValueError(f"Cobertura '{nome_cob}' n√£o encontrada para produto '{nome_produto}'")
                
                policy_data['cd_coberturas'] = cd_coberturas
            else:
                # Se n√£o h√° coberturas especificadas, usar coberturas b√°sicas
                coberturas_produto = crud.get_coberturas_by_produto(cd_produto)
                coberturas_basicas = [c.cd_cobertura for c in coberturas_produto if c.dv_basica]
                if coberturas_basicas:
                    policy_data['cd_coberturas'] = coberturas_basicas
            
            # Valida√ß√µes adicionais
            if len(policy_data['segurado']) < 3:
                raise ValueError("Nome do segurado deve ter pelo menos 3 caracteres")
            
            if len(policy_data['cep']) != 8:
                raise ValueError("CEP deve ter 8 d√≠gitos")

            # DESABILITADO: Checar bloqueio de regi√£o (feature removida)
            # if 'REGION_BLOCK_FEATURE_ENABLED' in globals() and REGION_BLOCK_FEATURE_ENABLED:
            #     try:
            #         blocked, reason, severity = crud.is_cep_blocked(policy_data['cep'], scope='residencial')
            #         if blocked:
            #             failed_policies.append({
            #                 'numero_apolice': policy_data['numero_apolice'],
            #                 'erro': f"Regi√£o bloqueada: {reason or 'Alto risco'}",
            #                 'blocked': True
            #             })
            #             continue
            #     except Exception as e:
            #         failed_policies.append({
            #             'numero_apolice': policy_data['numero_apolice'],
            #             'erro': f"Aviso bloqueio n√£o verificado: {e}",
            #             'blocked': False
            #         })
            
            # Calcular risco
            risk_data = calculate_policy_risk(policy_data)
            
            # Salvar no banco
            try:
                policy_id = save_policy_to_database(policy_data, risk_data)
                
                if policy_id:
                    coberturas_info = ""
                    if 'cd_coberturas' in policy_data:
                        coberturas_info = f" com {len(policy_data['cd_coberturas'])} coberturas"
                    
                    successful_policies.append({
                        'numero_apolice': policy_data['numero_apolice'],
                        'segurado': policy_data['segurado'],
                        'produto': nome_produto,
                        'coberturas': len(policy_data.get('cd_coberturas', [])),
                        'score_risco': risk_data['score_risco'],
                        'nivel_risco': risk_data['nivel_risco'],
                        'policy_id': policy_id
                    })
                else:
                    failed_policies.append({
                        'numero_apolice': policy_data['numero_apolice'],
                        'erro': 'Erro ao salvar no banco'
                    })
            except Exception as save_error:
                # Capturar erros espec√≠ficos de constraint de unicidade
                error_msg = str(save_error)
                if "UNIQUE constraint failed" in error_msg:
                    failed_policies.append({
                        'numero_apolice': policy_data['numero_apolice'],
                        'erro': 'Ap√≥lice duplicada - n√∫mero j√° existe no banco'
                    })
                else:
                    failed_policies.append({
                        'numero_apolice': policy_data['numero_apolice'],
                        'erro': f'Erro ao salvar: {error_msg}'
                    })
                
        except Exception as e:
            failed_policies.append({
                'numero_apolice': str(row.get('numero_apolice', f'Linha {index + 1}')),
                'erro': str(e)
            })
    
    # Finalizar progresso
    progress_bar.progress(1.0)
    status_text.text("‚úÖ Processamento conclu√≠do!")
    
    # Mostrar resultados
    with results_container:
        st.markdown("### üìä Resultados do Processamento")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.metric("‚úÖ Sucessos", len(successful_policies))
        
        with col2:
            st.metric("‚ùå Falhas", len(failed_policies))
        
        # Mostrar ap√≥lices processadas com sucesso
        if successful_policies:
            st.markdown("#### ‚úÖ Ap√≥lices Processadas com Sucesso")
            success_df = pd.DataFrame(successful_policies)
            st.dataframe(success_df, width='stretch')
        
        # Mostrar falhas
        if failed_policies:
            st.markdown("#### ‚ùå Ap√≥lices com Falha")
            failed_df = pd.DataFrame(failed_policies)
            st.dataframe(failed_df, width='stretch')

def show_updated_ranking():
    """Mostra ranking atualizado de ap√≥lices por risco"""
    
    st.subheader("üìä Ranking Atualizado por Risco")
    
    try:
        # Tentar conectar ao banco - primeiro tabela residencial, depois original
        import sqlite3
        
        conn = sqlite3.connect('database/radar_sinistro.db')
        
        # Usar sempre a tabela principal 'apolices'
        query = """
        SELECT numero_apolice, segurado, cep, valor_segurado, 
               tipo_residencia, score_risco, nivel_risco, 
               probabilidade_sinistro, created_at
        FROM apolices 
        ORDER BY score_risco DESC, created_at DESC
        """
        
        df = pd.read_sql_query(query, conn)
        conn.close()
        
        if df.empty:
            st.info("Nenhuma ap√≥lice encontrada no banco de dados.")
            st.info("Use a aba 'Inclus√£o Individual' para adicionar sua primeira ap√≥lice!")
            return
        
        # M√©tricas resumo
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("Total de Ap√≥lices", len(df))
        
        with col2:
            high_risk = len(df[df['score_risco'] >= 70])
            st.metric("Alto Risco", high_risk, delta=f"{high_risk/len(df)*100:.1f}%")
        
        with col3:
            medium_risk = len(df[(df['score_risco'] >= 40) & (df['score_risco'] < 70)])
            st.metric("M√©dio Risco", medium_risk, delta=f"{medium_risk/len(df)*100:.1f}%")
        
        with col4:
            low_risk = len(df[df['score_risco'] < 40])
            st.metric("Baixo Risco", low_risk, delta=f"{low_risk/len(df)*100:.1f}%")
        
        # Filtros
        st.markdown("### üîç Filtros")
        col1, col2, col3 = st.columns(3)
        
        with col1:
            risk_filter = st.selectbox(
                "N√≠vel de Risco",
                ["Todos", "alto", "medio", "baixo"]
            )
        
        with col2:
            min_value = st.number_input(
                "Valor M√≠nimo (R$)",
                min_value=0.0,
                value=0.0,
                step=1000.0
            )
        
        with col3:
            search_policy = st.text_input(
                "Buscar Ap√≥lice",
                placeholder="Digite n√∫mero da ap√≥lice..."
            )
        
        # Aplicar filtros
        filtered_df = df.copy()
        
        if risk_filter != "Todos":
            filtered_df = filtered_df[filtered_df['nivel_risco'] == risk_filter]
        
        if min_value > 0:
            filtered_df = filtered_df[filtered_df['valor_segurado'] >= min_value]
        
        if search_policy:
            filtered_df = filtered_df[filtered_df['numero_apolice'].str.contains(search_policy, case=False, na=False)]
        
        # Mostrar tabela
        st.markdown(f"### üìã Ap√≥lices Encontradas ({len(filtered_df)})")
        
        if not filtered_df.empty:
            # Adicionar emojis de risco
            filtered_df['risco'] = filtered_df['score_risco'].apply(
                lambda x: f"{get_risk_level_emoji(x)} {x:.1f}"
            )
            
            # Formatar valores
            filtered_df['valor'] = filtered_df['valor_segurado'].apply(
                lambda x: f"R$ {x:,.2f}"
            )
            
            # Selecionar colunas para exibi√ß√£o (residencial)
            display_df = filtered_df[[
                'numero_apolice', 'segurado', 'tipo_residencia',
                'valor', 'risco', 'nivel_risco', 'cep'
            ]].copy()
            
            display_df.columns = [
                'N√∫mero', 'Segurado', 'Tipo', 
                'Valor Segurado', 'Score', 'N√≠vel', 'CEP'
            ]
            
            st.dataframe(
                display_df,
                width='stretch',
                height=400
            )
            
            # Bot√£o para exportar
            csv_export = filtered_df.to_csv(index=False)
            st.download_button(
                label="üì• Exportar Dados",
                data=csv_export,
                file_name=f"apolices_ranking_{datetime.now().strftime('%Y%m%d_%H%M')}.csv",
                mime="text/csv"
            )
        else:
            st.info("üîç Nenhuma ap√≥lice encontrada com os filtros aplicados.")
            
    except Exception as e:
        st.error(f"‚ùå Erro ao buscar dados: {e}")

def show_climate_risk_analysis():
    """Nova aba para an√°lise avan√ßada de riscos clim√°ticos"""
    
    st.subheader("üå¶Ô∏è An√°lise Avan√ßada de Riscos Clim√°ticos")
    st.markdown("""
    Esta se√ß√£o permite analisar riscos espec√≠ficos por cobertura considerando dados clim√°ticos em tempo real.
    Selecione uma ap√≥lice existente ou insira dados para an√°lise pontual.
    """)
    
    # Op√ß√µes de an√°lise
    analysis_type = st.radio(
        "Tipo de An√°lise:",
        ["üìã Analisar Ap√≥lice Existente", "üîç An√°lise Pontual"]
    )
    
    if analysis_type == "üìã Analisar Ap√≥lice Existente":
        show_existing_policy_analysis()
    else:
        show_spot_analysis()

def show_existing_policy_analysis():
    """An√°lise de ap√≥lice existente no banco"""
    st.markdown("### Selecionar Ap√≥lice Existente")
    
    try:
        # Buscar ap√≥lices no banco
        import sqlite3
        conn = sqlite3.connect('database/radar_sinistro.db')
        
        query = """
        SELECT numero_apolice, segurado, cep, tipo_residencia, valor_segurado, latitude, longitude
        FROM apolices 
        WHERE ativa = 1
        ORDER BY created_at DESC
        LIMIT 50
        """
        
        df_policies = pd.read_sql_query(query, conn)
        conn.close()
        
        if df_policies.empty:
            st.info("Nenhuma ap√≥lice encontrada. Use a aba 'Inclus√£o Individual' para criar uma ap√≥lice primeiro.")
            return
        
        # Seletor de ap√≥lice
        policy_options = {}
        for _, row in df_policies.iterrows():
            key = f"{row['numero_apolice']} - {row['segurado']}"
            policy_options[key] = row
        
        selected_policy_key = st.selectbox(
            "Selecione a Ap√≥lice:",
            options=list(policy_options.keys()),
            help="Escolha uma ap√≥lice para an√°lise clim√°tica detalhada"
        )
        
        if selected_policy_key:
            selected_policy = policy_options[selected_policy_key]
            
            # Mostrar dados da ap√≥lice selecionada
            col1, col2 = st.columns(2)
            
            with col1:
                st.info(f"""
                **Ap√≥lice:** {selected_policy['numero_apolice']}
                **Segurado:** {selected_policy['segurado']}
                **CEP:** {selected_policy['cep']}
                **Tipo:** {selected_policy['tipo_residencia']}
                """)
            
            with col2:
                st.info(f"""
                **Valor Segurado:** R$ {selected_policy['valor_segurado']:,.2f}
                **Latitude:** {selected_policy.get('latitude', 'N/A')}
                **Longitude:** {selected_policy.get('longitude', 'N/A')}
                """)
            
            # Sele√ß√£o de coberturas para an√°lise
            st.markdown("### Coberturas para An√°lise")
            
            available_coverages = {
                'Danos El√©tricos': 'danos_eletricos',
                'Vendaval': 'vendaval',
                'Granizo': 'granizo', 
                'Alagamento': 'alagamento'
            }
            
            selected_coverages = st.multiselect(
                "Selecione as coberturas para an√°lise clim√°tica:",
                options=list(available_coverages.keys()),
                default=list(available_coverages.keys()),
                help="Escolha quais coberturas devem ser analisadas"
            )
            
            if st.button("üî¨ Executar An√°lise Clim√°tica", width='stretch'):
                if selected_coverages:
                    # Preparar dados da ap√≥lice
                    policy_data = {
                        'numero_apolice': selected_policy['numero_apolice'],
                        'segurado': selected_policy['segurado'],
                        'cep': selected_policy['cep'],
                        'valor_segurado': float(selected_policy['valor_segurado']),
                        'tipo_residencia': selected_policy['tipo_residencia'],
                        'latitude': float(selected_policy.get('latitude', -15.0)),
                        'longitude': float(selected_policy.get('longitude', -47.0))
                    }
                    
                    # Executar an√°lise
                    with st.spinner("üå¶Ô∏è Analisando riscos clim√°ticos..."):
                        coverage_risk_data = calculate_coverage_specific_risk(policy_data, selected_coverages)
                    
                    # Mostrar resultados detalhados
                    show_detailed_climate_results(coverage_risk_data)
                else:
                    st.error("Selecione pelo menos uma cobertura para an√°lise.")
        
    except Exception as e:
        st.error(f"Erro ao buscar ap√≥lices: {e}")

def show_spot_analysis():
    """An√°lise pontual sem ap√≥lice cadastrada"""
    st.markdown("### An√°lise Pontual")
    
    with st.form("spot_analysis_form"):
        col1, col2 = st.columns(2)
        
        with col1:
            latitude = st.number_input(
                "Latitude",
                min_value=-90.0,
                max_value=90.0,
                value=-23.5505,  # S√£o Paulo
                step=0.0001,
                format="%.4f",
                help="Latitude da localiza√ß√£o para an√°lise"
            )
            
            tipo_residencia = st.selectbox(
                "Tipo de Resid√™ncia",
                ["casa", "apartamento", "sobrado", "kitnet"]
            )
            
            valor_segurado = st.number_input(
                "Valor Segurado (R$)",
                min_value=10000.0,
                max_value=10000000.0,
                value=300000.0,
                step=10000.0
            )
        
        with col2:
            longitude = st.number_input(
                "Longitude", 
                min_value=-180.0,
                max_value=180.0,
                value=-46.6333,  # S√£o Paulo
                step=0.0001,
                format="%.4f",
                help="Longitude da localiza√ß√£o para an√°lise"
            )
            
            idade_imovel = st.number_input(
                "Idade do Im√≥vel (anos)",
                min_value=0,
                max_value=100,
                value=15,
                help="Idade aproximada da constru√ß√£o"
            )
            
            cep = st.text_input(
                "CEP (opcional)",
                placeholder="01234567",
                help="CEP para an√°lise regional"
            )
        
        # Sele√ß√£o de coberturas
        st.markdown("#### Coberturas para An√°lise")
        available_coverages = ['Danos El√©tricos', 'Vendaval', 'Granizo', 'Alagamento']
        
        selected_coverages = st.multiselect(
            "Selecione as coberturas:",
            options=available_coverages,
            default=available_coverages,
            help="Escolha quais coberturas devem ser analisadas"
        )
        
        submitted = st.form_submit_button("üî¨ Executar An√°lise", width='stretch')
    
    if submitted and selected_coverages:
        # Preparar dados
        policy_data = {
            'numero_apolice': 'ANALISE-PONTUAL',
            'segurado': 'An√°lise Pontual',
            'cep': cep.replace('-', '') if cep else '00000000',
            'valor_segurado': valor_segurado,
            'tipo_residencia': tipo_residencia,
            'latitude': latitude,
            'longitude': longitude,
            'ano_construcao': datetime.now().year - idade_imovel
        }
        
        # Executar an√°lise
        with st.spinner("üå¶Ô∏è Analisando riscos clim√°ticos na localiza√ß√£o..."):
            coverage_risk_data = calculate_coverage_specific_risk(policy_data, selected_coverages)
        
        # Mostrar resultados
        show_detailed_climate_results(coverage_risk_data)

def show_detailed_climate_results(coverage_risk_data):
    """Mostra resultados detalhados da an√°lise clim√°tica"""
    
    if not coverage_risk_data['has_specific_analysis']:
        st.error("‚ùå N√£o foi poss√≠vel executar a an√°lise clim√°tica espec√≠fica.")
        return
    
    analysis = coverage_risk_data['coverage_analysis']
    
    st.markdown("### üìä Resultados da An√°lise Clim√°tica")
    
    # Resumo geral
    col1, col2, col3 = st.columns(3)
    
    with col1:
        overall_prob = analysis['summary']['average_risk_probability']
        emoji = get_risk_level_emoji(overall_prob * 100)
        st.metric(
            "Risco Clim√°tico Geral",
            f"{emoji} {analysis['summary']['overall_risk_level'].upper()}",
            f"{overall_prob:.1%}"
        )
    
    with col2:
        high_risk_count = len(analysis['summary']['high_risk_coverages'])
        st.metric(
            "Coberturas Alto Risco",
            high_risk_count,
            f"de {analysis['summary']['total_coverages_analyzed']}"
        )
    
    with col3:
        timestamp = datetime.fromisoformat(analysis['analysis_timestamp'].replace('Z', '+00:00'))
        st.metric(
            "An√°lise Executada",
            timestamp.strftime("%H:%M"),
            timestamp.strftime("%d/%m/%Y")
        )
    
    # Gr√°fico de risco por cobertura
    if analysis['coverages']:
        st.markdown("#### üìà Distribui√ß√£o de Risco por Cobertura")
        
        # Preparar dados para gr√°fico
        coverage_names = []
        risk_percentages = []
        risk_colors = []
        
        for coverage_key, details in analysis['coverages'].items():
            if 'error' not in details:
                name = coverage_key.replace('_', ' ').title()
                percentage = details['probability'] * 100
                
                coverage_names.append(name)
                risk_percentages.append(percentage)
                
                # Cores baseadas no risco
                if percentage >= 60:
                    risk_colors.append('#ff4444')  # Vermelho
                elif percentage >= 30:
                    risk_colors.append('#ffaa00')  # Laranja
                else:
                    risk_colors.append('#44ff44')  # Verde
        
        # Criar gr√°fico usando Streamlit
        chart_data = pd.DataFrame({
            'Cobertura': coverage_names,
            'Risco (%)': risk_percentages
        })
        
        st.bar_chart(chart_data.set_index('Cobertura'))
    
    # Detalhes por cobertura
    st.markdown("#### üîç Detalhes por Cobertura")
    
    for coverage_key, details in analysis['coverages'].items():
        if 'error' not in details:
            coverage_name = coverage_key.replace('_', ' ').title()
            
            with st.expander(f"{coverage_name} - {details['risk_level'].upper()}"):
                col1, col2 = st.columns(2)
                
                with col1:
                    st.metric("Probabilidade", f"{details['probability']:.1%}")
                    st.metric("Score de Risco", f"{details['risk_score']:.1f}")
                
                with col2:
                    st.metric("N√≠vel", details['risk_level'].upper())
                    
                    # Mostrar se √© predi√ß√£o do modelo ou heur√≠stica
                    if details.get('model_prediction') is not None:
                        st.info("ü§ñ Predi√ß√£o baseada em modelo ML")
                    else:
                        st.info("üìä Predi√ß√£o baseada em regras heur√≠sticas")
                
                # Principais fatores de risco
                if details.get('main_factors'):
                    st.markdown("**Principais Fatores:**")
                    for factor in details['main_factors'][:3]:
                        importance = factor.get('importance', 0.1)
                        st.write(f"‚Ä¢ {factor['feature']}: {importance:.2f}")
    
    # Recomenda√ß√µes
    recommendations = coverage_risk_data['recommendations']
    if recommendations:
        st.markdown("#### ‚ö†Ô∏è Recomenda√ß√µes Espec√≠ficas")
        
        for i, rec in enumerate(recommendations, 1):
            # rec √© uma string simples, n√£o um dicion√°rio
            st.info(f"**{i}.** {rec}")
            st.markdown("---")
    
    # Exportar dados
    if st.button("üì• Exportar An√°lise", width='stretch'):
        export_data = {
            'timestamp': analysis['analysis_timestamp'],
            'summary': analysis['summary'],
            'coverages': analysis['coverages'],
            'recommendations': recommendations
        }
        
        # Converter para JSON
        json_data = json.dumps(export_data, indent=2, ensure_ascii=False)
        
        st.download_button(
            label="üíæ Baixar Relat√≥rio JSON",
            data=json_data,
            file_name=f"analise_climatica_{datetime.now().strftime('%Y%m%d_%H%M')}.json",
            mime="application/json"
        )

# Fun√ß√£o principal para integra√ß√£o
if __name__ == "__main__":
    show_manage_policies()
